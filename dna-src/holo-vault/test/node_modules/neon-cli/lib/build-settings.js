"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rust = require("./rust");
var JSON = require("ts-typed-json");
function isStringDict(x) {
    for (var _i = 0, _a = Object.keys(x); _i < _a.length; _i++) {
        var key = _a[_i];
        if (x[key] !== null && typeof x[key] !== 'string') {
            return false;
        }
    }
    return true;
}
var BuildSettings = /** @class */ (function () {
    function BuildSettings(rustc, env) {
        this.rustc = rustc;
        this.env = env;
    }
    BuildSettings.prototype.match = function (other) {
        var _this = this;
        return Object.keys(this.env).every(function (key) {
            return (!_this.env[key] && !other.env[key]) ||
                (_this.env[key] === other.env[key]);
        });
    };
    BuildSettings.current = function (toolchain) {
        var spawnResult = rust.spawnSync("rustc", ["--version"], toolchain);
        if (spawnResult.error) {
            if (spawnResult.error.message.includes("ENOENT")) {
                throw new Error('Rust is not installed or rustc is not in your path.');
            }
            throw spawnResult.error;
        }
        var rustc = spawnResult.stdout
            .toString('utf8')
            .trim();
        return new BuildSettings(rustc, {
            npm_config_target: process.env.npm_config_target || null,
            npm_config_arch: process.env.npm_config_arch || null,
            npm_config_target_arch: process.env.npm_config_target_arch || null,
            npm_config_disturl: process.env.npm_config_disturl || null,
            npm_config_runtime: process.env.npm_config_runtime || null,
            npm_config_build_from_source: process.env.npm_config_build_from_source || null,
            npm_config_devdir: process.env.npm_config_devdir || null
        });
    };
    BuildSettings.fromJSON = function (value) {
        if (!JSON.isObject(value)) {
            throw new TypeError("value is not an object");
        }
        var rustc = value.rustc;
        var env = value.env;
        if (typeof rustc !== 'string') {
            throw new TypeError("value.rustc is not a string");
        }
        if (!JSON.isObject(env)) {
            throw new TypeError("value.env is not an object");
        }
        if (!isStringDict(env)) {
            throw new TypeError("value.env is not a string dict");
        }
        return new BuildSettings(rustc, env);
    };
    BuildSettings.prototype.toJSON = function () {
        return {
            "rustc": this.rustc,
            "env": this.env
        };
    };
    return BuildSettings;
}());
exports.default = BuildSettings;
