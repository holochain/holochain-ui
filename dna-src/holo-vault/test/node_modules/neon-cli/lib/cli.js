"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var neon_new_1 = require("./ops/neon_new");
var neon_build_1 = require("./ops/neon_build");
var neon_clean_1 = require("./ops/neon_clean");
var style = require("./style");
var cliCommands = require("command-line-commands");
var cliArgs = require("command-line-args");
var cliUsage = require("command-line-usage");
var log_1 = require("./log");
var log_2 = require("./log");
var JSON = require("ts-typed-json");
var metadata = JSON.loadSync(path.resolve(__dirname, '..', 'package.json'));
function commandUsage(command) {
    if (!spec[command]) {
        var e = new Error();
        e.command = command;
        e.name = 'INVALID_COMMAND';
        throw e;
    }
    console.error(cliUsage(spec[command].usage));
}
function logIf(multiple, action, cwd, module) {
    if (multiple) {
        log_1.default(action + " Neon package at " + (path.relative(cwd, module) || "."));
    }
}
function parseModules(cwd, names, paths) {
    var modules = names.length
        ? names.map(function (m) { return paths ? path.resolve(cwd, m)
            : path.resolve(cwd, 'node_modules', m); })
        : [cwd];
    return {
        modules: modules,
        multiple: modules.length > 1
    };
}
var spec = {
    null: {
        args: [{ name: "version", alias: "v", type: Boolean },
            { name: "help", alias: "h", type: String, defaultValue: null }],
        usage: [{
                header: "Neon",
                content: "Neon is a tool for building native Node.js modules with Rust."
            }, {
                header: "Synopsis",
                content: "$ neon [options] <command>"
            }, {
                header: "Command List",
                content: [{ name: "new", summary: "Create a new Neon project." },
                    { name: "build", summary: "(Re)build a Neon project." },
                    { name: "clean", summary: "Remove build artifacts from a Neon project." },
                    { name: "version", summary: "Display the Neon version." },
                    { name: "help", summary: "Display help information about Neon." }]
            }],
        action: function (options, usage) {
            if (options.version && options.help === undefined) {
                spec.version.action.call(this, options);
            }
            else if (options.help !== undefined) {
                commandUsage(options.help);
            }
            else {
                console.error(usage);
            }
        }
    },
    help: {
        args: [{ name: "command", type: String, defaultOption: true },
            { name: "help", alias: "h", type: Boolean }],
        usage: [{
                header: "neon help",
                content: "Get help about a Neon command"
            }, {
                header: "Synopsis",
                content: "$ neon help [command]"
            }],
        action: function (options) {
            if (options && options.command) {
                commandUsage(options.command);
            }
            else if (options && options.help) {
                commandUsage('help');
            }
            else {
                console.error(cliUsage(spec.null.usage));
            }
        }
    },
    new: {
        args: [{ name: "name", type: String, defaultOption: true },
            { name: "help", alias: "h", type: Boolean }],
        usage: [{
                header: "neon new",
                content: "Create a new Neon project."
            }, {
                header: "Synopsis",
                content: "$ neon new [@<scope>/]<name>"
            }],
        action: function (options) {
            if (options.help) {
                commandUsage('new');
            }
            else if (!options.name) {
                console.error(cliUsage(spec.new.usage));
            }
            else {
                return neon_new_1.default(this.cwd, options.name);
            }
            return;
        }
    },
    build: {
        args: [{ name: "release", alias: "r", type: Boolean },
            { name: "path", alias: "p", type: Boolean },
            { name: "modules", type: String, multiple: true, defaultOption: true },
            { name: "help", alias: "h", type: Boolean }],
        usage: [{
                header: "neon build",
                content: "(Re)build a Neon project."
            }, {
                header: "Synopsis",
                content: ["$ neon build [options]",
                    "$ neon build [options] [underline]{module} ..."]
            }, {
                header: "Options",
                optionList: [{
                        name: "release",
                        alias: "r",
                        type: Boolean,
                        description: "Release build."
                    }, {
                        name: "path",
                        alias: "p",
                        type: Boolean,
                        description: "Specify modules by path instead of name."
                    }]
            }],
        action: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, modules, multiple, _i, modules_1, module_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (options.help) {
                                commandUsage('build');
                                return [2 /*return*/];
                            }
                            _a = parseModules(this.cwd, (options.modules || []), !!options.path), modules = _a.modules, multiple = _a.multiple;
                            _i = 0, modules_1 = modules;
                            _b.label = 1;
                        case 1:
                            if (!(_i < modules_1.length)) return [3 /*break*/, 4];
                            module_1 = modules_1[_i];
                            logIf(multiple, "building", this.cwd, module_1);
                            return [4 /*yield*/, neon_build_1.default(module_1, this.toolchain, !!options.release)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        }
    },
    clean: {
        args: [{ name: "path", alias: "p", type: Boolean },
            { name: "modules", type: String, multiple: true, defaultOption: true },
            { name: "help", alias: "h", type: Boolean }],
        usage: [{
                header: "neon clean",
                content: "Remove build artifacts from a Neon project."
            }, {
                header: "Synopsis",
                content: ["$ neon clean [options]",
                    "$ neon clean [options] [underline]{module} ..."]
            }, {
                header: "Options",
                optionList: [{
                        name: "path",
                        alias: "p",
                        type: Boolean,
                        description: "Specify modules by path instead of name."
                    }]
            }],
        action: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, modules, multiple, _i, modules_2, module_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (options.help) {
                                commandUsage('clean');
                                return [2 /*return*/];
                            }
                            _a = parseModules(this.cwd, (options.modules || []), !!options.path), modules = _a.modules, multiple = _a.multiple;
                            _i = 0, modules_2 = modules;
                            _b.label = 1;
                        case 1:
                            if (!(_i < modules_2.length)) return [3 /*break*/, 4];
                            module_2 = modules_2[_i];
                            logIf(multiple, "cleaning", this.cwd, module_2);
                            return [4 /*yield*/, neon_clean_1.default(module_2)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        }
    },
    version: {
        args: [{ name: "help", alias: "h", type: Boolean }],
        usage: [{
                header: "neon version",
                content: "Display the Neon version."
            }, {
                header: "Synopsis",
                content: "$ neon version"
            }],
        action: function (options) {
            if (options.help) {
                commandUsage('version');
                return;
            }
            console.log(JSON.asObject(metadata).version);
        }
    }
};
var CLI = /** @class */ (function () {
    function CLI(argv, cwd) {
        // Check for a toolchain argument in the style of Rust tools (e.g., `neon +nightly build`).
        if (argv.length > 2 && argv[2].trim().startsWith('+')) {
            this.toolchain = argv[2].substring(1).trim();
            this.argv = argv.slice(3);
        }
        else {
            this.toolchain = null;
            this.argv = argv.slice(2);
        }
        this.cwd = cwd;
    }
    CLI.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var parsed, command, argv, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log_2.setup(function (msg) { console.log(style.info(msg)); });
                        try {
                            parsed = cliCommands([null, 'help', 'new', 'build', 'clean', 'version'], this.argv);
                        }
                        catch (e) {
                            spec.help.action.call(this);
                            switch (e.name) {
                                case 'INVALID_COMMAND':
                                    console.error(style.error("No manual entry for `neon " + e.command + "`"));
                                    break;
                                default:
                                    console.error(style.error(e.message));
                                    break;
                            }
                            process.exit(1);
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        command = parsed.command, argv = parsed.argv;
                        return [4 /*yield*/, spec[command].action.call(this, cliArgs(spec[command].args, { argv: argv }), cliUsage(spec[command].usage))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error(style.error(e_1.message));
                        console.error();
                        console.error(e_1.stack);
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return CLI;
}());
exports.default = CLI;
