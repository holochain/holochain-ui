"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("../async/fs");
var inquirer_1 = require("inquirer");
var git_config_1 = require("../async/git-config");
var path = require("path");
var handlebars = require("handlebars");
var semver = require("semver");
var style = require("../style");
var validateLicense = require("validate-npm-package-license");
var validateName = require("validate-npm-package-name");
var JSON = require("ts-typed-json");
var ROOT_DIR = path.resolve(__dirname, '..', '..');
var TEMPLATES_DIR = path.resolve(ROOT_DIR, 'templates');
var NEON_CLI_VERSION = JSON.asString(JSON.asObject(JSON.loadSync(path.resolve(ROOT_DIR, 'package.json'))).version);
function compile(filename) {
    return __awaiter(this, void 0, void 0, function () {
        var source;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs_1.readFile(path.resolve(TEMPLATES_DIR, filename), {
                        encoding: 'utf8'
                    })];
                case 1:
                    source = _a.sent();
                    return [2 /*return*/, handlebars.compile(source, { noEscape: true })];
            }
        });
    });
}
var GITIGNORE_TEMPLATE = compile('.gitignore.hbs');
var CARGO_TEMPLATE = compile('Cargo.toml.hbs');
var NPM_TEMPLATE = compile('package.json.hbs');
var INDEXJS_TEMPLATE = compile('index.js.hbs');
var LIBRS_TEMPLATE = compile('lib.rs.hbs');
var README_TEMPLATE = compile('README.md.hbs');
var BUILDRS_TEMPLATE = compile('build.rs.hbs');
function guessAuthor() {
    return __awaiter(this, void 0, void 0, function () {
        var author, config, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    author = {
                        name: process.env.USER || process.env.USERNAME,
                        email: undefined
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, git_config_1.default()];
                case 2:
                    config = _a.sent();
                    if (config.user.name) {
                        author.name = config.user.name;
                    }
                    if (config.user.email) {
                        author.email = config.user.email;
                    }
                    return [2 /*return*/, author];
                case 3:
                    e_1 = _a.sent();
                    return [2 /*return*/, author];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function wizard(pwd, name) {
    return __awaiter(this, void 0, void 0, function () {
        var its, errors, scoped, _a, scope, local, root, guess, answers, ctx, lib, native_, src, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, relativeRoot, relativeNode, relativeRust;
        return __generator(this, function (_r) {
            switch (_r.label) {
                case 0:
                    its = validateName(name);
                    if (!its.validForNewPackages) {
                        errors = (its.errors || []).concat(its.warnings || []);
                        throw new Error("Sorry, " + errors.join(" and ") + ".");
                    }
                    scoped = name.match(/@([^\/]+)\/(.*)/);
                    _a = scoped ? scoped : [, null, name], scope = _a[1], local = _a[2];
                    console.log("This utility will walk you through creating the " + style.project(name) + " Neon project.");
                    console.log("It only covers the most common items, and tries to guess sensible defaults.");
                    console.log();
                    console.log("Press ^C at any time to quit.");
                    root = path.resolve(pwd, local);
                    return [4 /*yield*/, guessAuthor()];
                case 1:
                    guess = _r.sent();
                    return [4 /*yield*/, inquirer_1.prompt([
                            {
                                type: 'input',
                                name: 'version',
                                message: "version",
                                default: "0.1.0",
                                validate: function (input) {
                                    if (semver.valid(input)) {
                                        return true;
                                    }
                                    return "Invalid version: " + input;
                                }
                            },
                            { type: 'input', name: 'description', message: "description" },
                            { type: 'input', name: 'node', message: "node entry point", default: "lib/index.js" },
                            { type: 'input', name: 'git', message: "git repository" },
                            { type: 'input', name: 'author', message: "author", default: guess.name },
                            { type: 'input', name: 'email', message: "email", default: guess.email },
                            {
                                type: 'input',
                                name: 'license',
                                message: "license",
                                default: "MIT",
                                validate: function (input) {
                                    var its = validateLicense(input);
                                    if (its.validForNewPackages) {
                                        return true;
                                    }
                                    var errors = its.warnings || [];
                                    return "Sorry, " + errors.join(" and ") + ".";
                                }
                            }
                        ])];
                case 2:
                    answers = _r.sent();
                    answers.name = {
                        npm: {
                            full: name,
                            scope: scope,
                            local: local
                        },
                        cargo: {
                            external: local,
                            internal: local.replace(/-/g, "_")
                        }
                    };
                    answers.description = escapeQuotes(answers.description);
                    answers.git = encodeURI(answers.git);
                    answers.author = escapeQuotes(answers.author);
                    ctx = {
                        project: answers,
                        "neon-cli": {
                            major: semver.major(NEON_CLI_VERSION),
                            minor: semver.minor(NEON_CLI_VERSION),
                            patch: semver.patch(NEON_CLI_VERSION)
                        }
                    };
                    lib = path.resolve(root, path.dirname(answers.node));
                    native_ = path.resolve(root, 'native');
                    src = path.resolve(native_, 'src');
                    return [4 /*yield*/, fs_1.mkdirs(lib)];
                case 3:
                    _r.sent();
                    return [4 /*yield*/, fs_1.mkdirs(src)];
                case 4:
                    _r.sent();
                    _b = fs_1.writeFile;
                    _c = [path.resolve(root, '.gitignore')];
                    return [4 /*yield*/, GITIGNORE_TEMPLATE];
                case 5: return [4 /*yield*/, _b.apply(void 0, _c.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 6:
                    _r.sent();
                    _d = fs_1.writeFile;
                    _e = [path.resolve(root, 'package.json')];
                    return [4 /*yield*/, NPM_TEMPLATE];
                case 7: return [4 /*yield*/, _d.apply(void 0, _e.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 8:
                    _r.sent();
                    _f = fs_1.writeFile;
                    _g = [path.resolve(native_, 'Cargo.toml')];
                    return [4 /*yield*/, CARGO_TEMPLATE];
                case 9: return [4 /*yield*/, _f.apply(void 0, _g.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 10:
                    _r.sent();
                    _h = fs_1.writeFile;
                    _j = [path.resolve(root, 'README.md')];
                    return [4 /*yield*/, README_TEMPLATE];
                case 11: return [4 /*yield*/, _h.apply(void 0, _j.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 12:
                    _r.sent();
                    _k = fs_1.writeFile;
                    _l = [path.resolve(root, answers.node)];
                    return [4 /*yield*/, INDEXJS_TEMPLATE];
                case 13: return [4 /*yield*/, _k.apply(void 0, _l.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 14:
                    _r.sent();
                    _m = fs_1.writeFile;
                    _o = [path.resolve(src, 'lib.rs')];
                    return [4 /*yield*/, LIBRS_TEMPLATE];
                case 15: return [4 /*yield*/, _m.apply(void 0, _o.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 16:
                    _r.sent();
                    _p = fs_1.writeFile;
                    _q = [path.resolve(native_, 'build.rs')];
                    return [4 /*yield*/, BUILDRS_TEMPLATE];
                case 17: return [4 /*yield*/, _p.apply(void 0, _q.concat([(_r.sent())(ctx), { flag: 'wx' }]))];
                case 18:
                    _r.sent();
                    relativeRoot = path.relative(pwd, root);
                    relativeNode = path.relative(pwd, path.resolve(root, answers.node));
                    relativeRust = path.relative(pwd, path.resolve(src, 'lib.rs'));
                    console.log();
                    console.log("Woo-hoo! Your Neon project has been created in: " + style.path(relativeRoot));
                    console.log();
                    console.log("The main Node entry point is at: " + style.path(relativeNode));
                    console.log("The main Rust entry point is at: " + style.path(relativeRust));
                    console.log();
                    console.log("To build your project, just run " + style.command("npm install") + " from within the " + style.path(relativeRoot) + " directory.");
                    console.log("Then you can test it out with " + style.command("node -e 'require(\"./\")'") + ".");
                    console.log();
                    console.log("Happy hacking!");
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = wizard;
;
function escapeQuotes(str) {
    return str.replace(/"/g, '\\"');
}
