"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("./async/fs");
var rust = require("./rust");
var path = require("path");
var LIB_PREFIX = {
    'darwin': "lib",
    'freebsd': "lib",
    'linux': "lib",
    'sunos': "lib",
    'win32': ""
};
var LIB_SUFFIX = {
    'darwin': ".dylib",
    'freebsd': ".so",
    'linux': ".so",
    'sunos': ".so",
    'win32': ".dll"
};
/** The Rust build artifacts for a single build target of a Neon crate. */
var Target = /** @class */ (function () {
    function Target(crate, options) {
        if (options === void 0) { options = {}; }
        var _a = options.release, release = _a === void 0 ? true : _a, _b = options.arch, arch = _b === void 0 ? process.env.npm_config_arch || process.arch : _b;
        this.crate = crate;
        this.release = release;
        this.arch = arch;
        if (process.platform === 'win32') {
            this.triple = (arch === 'ia32') ? 'i686-pc-windows-msvc' : 'x86_64-pc-windows-msvc';
        }
        else {
            this.triple = '';
        }
        this.subdirectory = path.join(this.triple, release ? 'release' : 'debug');
        this.root = path.resolve(crate.root, 'target', this.subdirectory);
        var prefix = LIB_PREFIX[process.platform];
        var suffix = LIB_SUFFIX[process.platform];
        this.dylib = path.resolve(this.root, prefix + crate.name + suffix);
    }
    Target.prototype.clean = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Remove the directory associated with this target.
                    return [4 /*yield*/, fs_1.remove(path.resolve(this.crate.root, 'target', this.subdirectory))];
                    case 1:
                        // Remove the directory associated with this target.
                        _a.sent();
                        if (!this.crate.artifacts.haveActivated(this.subdirectory)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.crate.removeAddon()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        // Update the build state.
                        this.crate.artifacts.delete(this.subdirectory);
                        this.crate.saveArtifacts();
                        return [2 /*return*/];
                }
            });
        });
    };
    Target.prototype.build = function (toolchain, settings) {
        return __awaiter(this, void 0, void 0, function () {
            var macos, command, releaseFlags, extraFlags, targetFlags, args, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        macos = process.platform === 'darwin';
                        command = macos ? 'rustc' : 'build';
                        releaseFlags = this.release ? ["--release"] : [];
                        extraFlags = macos ? ["--", "-C", "link-args=-Wl,-undefined,dynamic_lookup"] : [];
                        targetFlags = this.triple ? ["--target=" + this.triple] : [];
                        args = [command].concat(releaseFlags, extraFlags, targetFlags);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, rust.spawn("cargo", args, toolchain, {
                                cwd: this.crate.root,
                                stdio: 'inherit'
                            })];
                    case 2:
                        result = _a.sent();
                        if (result !== 0) {
                            throw new Error("cargo build failed");
                        }
                        this.crate.artifacts.activate(this.subdirectory, settings);
                        return [2 /*return*/, result];
                    case 3:
                        this.crate.saveArtifacts();
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Target.prototype.inState = function (settings) {
        var savedSettings = this.crate.artifacts.lookup(this.subdirectory);
        return savedSettings && savedSettings.match(settings);
    };
    return Target;
}());
exports.default = Target;
;
