"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var build_settings_1 = require("./build-settings");
var fs_1 = require("fs");
var JSON = require("ts-typed-json");
/**
 * The current state of build artifacts, for all targets.
 */
var Artifacts = /** @class */ (function () {
    function Artifacts(active, targets) {
        if (active === void 0) { active = null; }
        if (targets === void 0) { targets = {}; }
        this.active = active;
        this.targets = targets;
    }
    Artifacts.load = function (file) {
        try {
            return Artifacts.fromJSON(JSON.loadSync(file));
        }
        catch (e) {
            return new Artifacts();
        }
    };
    Artifacts.fromJSON = function (json) {
        if (!JSON.isObject(json)) {
            throw new TypeError("expected object, found " + (json === null ? "null" : typeof json));
        }
        var active = json.active;
        if (typeof active !== 'string' && active !== null) {
            throw new TypeError("json.active is not a string or null");
        }
        var jsonTargets = json.targets;
        if (!JSON.isObject(jsonTargets)) {
            throw new TypeError("json.targets is not an object");
        }
        var targets = {};
        for (var _i = 0, _a = Object.keys(jsonTargets); _i < _a.length; _i++) {
            var key = _a[_i];
            targets[key] = build_settings_1.default.fromJSON(jsonTargets[key]);
        }
        return new Artifacts(active, targets);
    };
    Artifacts.prototype.toJSON = function () {
        var targets = {};
        for (var _i = 0, _a = Object.keys(this.targets); _i < _a.length; _i++) {
            var target = _a[_i];
            targets[target] = this.targets[target].toJSON();
        }
        return {
            active: this.active,
            targets: targets
        };
    };
    Artifacts.prototype.save = function (file) {
        fs_1.writeFileSync(file, JSON.stringify(this.toJSON()));
    };
    Artifacts.prototype.lookup = function (path) {
        return this.targets[path];
    };
    Artifacts.prototype.activate = function (path, settings) {
        this.targets[path] = settings;
        this.active = path;
    };
    Artifacts.prototype.haveActivated = function (path) {
        return this.active === path;
    };
    Artifacts.prototype.delete = function (path) {
        delete this.targets[path];
        // If the path being deleted was the active one, there's no more active path.
        if (this.active === path) {
            this.active = null;
        }
    };
    Artifacts.prototype.reset = function () {
        this.active = null;
        this.targets = {};
    };
    return Artifacts;
}());
exports.default = Artifacts;
